@page "/spendings"

@using SmartSaver.Presentation.Models
@using Microsoft.Extensions.Configuration
@using SmartSaver.Presentation.Shared.Breadcrumbs

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IBreadcrumbService BreadcrumbService

@using SmartSaver.Presentation.Shared.LoadingSpinner

<h1>Spendings</h1>

<Alert Type="@_alertType" Message="@_alertMessage" />

<div class="row">
    <div class="col-md-6">
        <h3>Categories</h3>
        @if (_spendingCategories == null)
        {
            <LoadingSpinner />
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th width="90"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (_spendingCategories.Count() == 0)
                    {
                        <tr rowspan="1">
                            <td class="text-center">There are no categories</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var category in _spendingCategories)
                        {
                            <tr>
                                <td>@category.Name</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @onclick="@(e => DeleteCategory(e, category.Id))">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-6">
        <h3>Add new category</h3>
        <EditForm Model="_newCategory" OnValidSubmit="@CreateCategory">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label id="name">Name</label>
                <InputText id="name" class="form-control" @bind-Value="_newCategory.Name" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Category[] _spendingCategories;
    private Category _newCategory = new Category();
    public string _alertMessage = "";
    public string _alertType = "success";

    protected async Task ReloadCategories()
    {
        try
        {
        	_spendingCategories = await Http.GetFromJsonAsync<Category[]>($"{Configuration["requestUri"]}/categories");
        }
        catch(Exception)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadCategories();
        InitializeBreadCrumbs();
    }

    protected void ResetAlert()
    {
        _alertType = "success";
        _alertMessage = "";
    }

    private async Task CreateCategory()
    {
        ResetAlert();
        try
        {
            var response = await Http.PostAsJsonAsync<Category>($"{Configuration["requestUri"]}/categories", _newCategory);

            await ReloadCategories();
            _newCategory.Name = "";
            _alertMessage = "Category created successfully";
        }
        catch (HttpRequestException exception)
        {
            _alertType = "danger";
            _alertMessage = "Category was not created. Error: " + exception.Message;
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    private async Task DeleteCategory(MouseEventArgs e, Guid id)
    {
        ResetAlert();
        try
        {
        	var response = await Http.DeleteAsync($"{Configuration["requestUri"]}/categories/" + id.ToString());

        if (response.IsSuccessStatusCode)
            if (response.IsSuccessStatusCode)
            {
                _spendingCategories = _spendingCategories.Where(c => c.Id != id).ToArray();

                _alertMessage = "Category deleted successfully";
            }
            else
            {
                _alertType = "danger";
                _alertMessage = "Category has not been deleted because it has transactions";
            }
        }
        catch(HttpRequestException)
        {
            _alertType = "danger";
            _alertMessage = "Category was not found";
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    
    private void InitializeBreadCrumbs()
    {
        BreadcrumbService.ClearList();
        BreadcrumbService.AddBreadcrumb("Spendings", "/spendings");
        BreadcrumbService.InvokeBreadcrumbsChanged();
    }
}

