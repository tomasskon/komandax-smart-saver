@page "/"
@using SmartSaver.Presentation.Models
@using SmartSaver.Presentation.Shared.LoadingSpinner
@using Microsoft.Extensions.Configuration
@using System.IO;
@using Tewr.Blazor.FileReader;
@using SmartSaver.Presentation.Shared.Breadcrumbs

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager NavigationManager;
@inject IFileReaderService fileReader
@inject IBreadcrumbService BreadcrumbService

@if (_user == null || _lastTransactions == null || _groupedTransactions == null)
{
    <LoadingSpinner />
}
else
{
    <h1>Profile page</h1>
    <div class="row">
        <div class="col-4">
            <div class="form-group">
                <input type="file" @ref="inputReference" @onchange="async () => await OpenFileAsync()" />
                <u1>
                </u1>
            </div>
            <button class="btn btn-block btn-success" @onclick="async () => await UploadFileAsync()">Upload profile image</button>
            @if (!string.IsNullOrWhiteSpace(message))
            {
                <div class="alert alert-success">
                    Image has been uploaded
                </div>
            }
        </div>
        <div class="rounded-circle">
            @if (imagePath != null)
            {
                <img style="width:150px" src="@imagePath" class=" align-content-lg-center" />
            }
        </div>
    </div>

    <h3 class="mb-0">My account</h3>
    <div class="card-body">
        <h6 class="heading-small text-muted mb-4">User information</h6>
        <div class="pl-lg-4">
            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group focused">
                        <label class="form-control-label" for="userid">User ID</label>
                        <input type="text" id="userid" class="form-control form-control-alternative" value="@_user.Id" readonly>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <EditForm Model="@_user" OnValidSubmit="@HandleSubmit">
                            <label class="form-control-label" for="email">Email address</label>
                            <input type="email" id="email" @bind-value="@_user.Gmail" class="form-control form-control-alternative">
                        </EditForm>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        <EditForm Model="@_user" OnValidSubmit="@HandleSubmit">
                            <label class="form-control-label" for="fname">Full name</label>
                            <input type="text" id="fname" @bind-value="@_user.FullName" class="form-control form-control-alternative">
                        </EditForm>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group focused">
                        <label class="form-control-label" for="card">Card balance</label>
                        <input type="text" id="card" class="form-control form-control-alternative" value="@_user.Card" readonly>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group focused">
                        <label class="form-control-label" for="cash">Cash balance</label>
                        <input type="text" id="cash" class="form-control form-control-alternative" value="@_user.Cash" readonly>
                    </div>
                </div>
            </div>
        </div>
        <hr class="my-4">
    </div>
    <footer class="footer">
        <div class="row align-items-center justify-content-xl-between">
        </div>
    </footer>

    <div>
        <h1 class="mb-4">Hello!</h1>

        <div class="row">
            <div class="col-md-6">
                <h3>Your last 5 transactions</h3>
                <table class="table">
                    <tr>
                        <th>Amount</th>
                        <th>Category Name</th>
                        <th>Balance</th>
                        <th>Created At</th>
                    </tr>
                    @foreach (var transaction in _lastTransactions)
                    {
                        <tr>
                            <td>@transaction.AmountDouble €</td>
                            <td>@transaction.Category.Name</td>
                            <td>@transaction.BalanceType</td>
                            <td>@transaction.CreatedAt</td>
                        </tr>
                     }
                </table>
            </div>
            <div class="col-md-6">
                <h3>Your spent amount per category</h3>
                <table class="table">
                    <tr>
                        <th>Category Name</th>
                        <th>Amount</th>
                    </tr>
                    @foreach (var groupedTransaction in _groupedTransactions)
                    {
                        <tr>
                            <td>@groupedTransaction.Key</td>
                            <td>@groupedTransaction.SumDouble €</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
}

@code
{
    ElementReference inputReference;
    string message = string.Empty;
    static string imagePath = null;
    private User _user;
    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;
    Stream fileStream = null;
    private Transaction[] _lastTransactions;
    private GroupedTransaction[] _groupedTransactions;

    protected override async Task OnInitializedAsync()
    {
        InitializeBreadCrumbs();
        await GetTableData();
        try
        {
            _user = await Http.GetFromJsonAsync<User>($"{Configuration["requestUri"]}/users");
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    private async Task GetTableData()
    {
        try
        {
            _lastTransactions = await Http.GetFromJsonAsync<Transaction[]>($"{Configuration["requestUri"]}/transactions/last/5");
            _groupedTransactions = await Http.GetFromJsonAsync<GroupedTransaction[]>($"{Configuration["requestUri"]}/transactions/grouped");
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    private void InitializeBreadCrumbs()
    {
        BreadcrumbService.ClearList();
        BreadcrumbService.AddBreadcrumb("Home", "/Home");
        BreadcrumbService.InvokeBreadcrumbsChanged();
    }

    protected async Task HandleSubmit()
    {
        try
        {
            await Http.PutAsJsonAsync($"{Configuration["requestUri"]}/users", _user);
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    async Task OpenFileAsync()
    {
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
            return;

        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        size = $"{fileInfo.Size}b";
        type = fileInfo.Type;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(ms.ToArray());
        }

    }

    async Task UploadFileAsync()
    {
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileName);
        var response = await Http.PostAsync($"{Configuration["requestUri"]}/api/images", content);


        if (response.IsSuccessStatusCode)
        {
            var uploadedFileName = await response.Content.ReadAsStringAsync();
            imagePath = $"{Configuration["requestUri"]}/{uploadedFileName}";
            message = "Uploaded successfully";
        }
    }
}