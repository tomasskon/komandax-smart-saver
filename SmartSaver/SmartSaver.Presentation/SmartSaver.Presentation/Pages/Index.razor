@page "/"
@using SmartSaver.Presentation.Models
@using SmartSaver.Presentation.Shared.LoadingSpinner
@using Microsoft.Extensions.Configuration
@using System.IO;
@using Tewr.Blazor.FileReader;

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager NavigationManager;
@inject IFileReaderService fileReader

@if (_user == null)
{
    <LoadingSpinner />
}
else
{
    <h1>Profile page</h1>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet">
    <div class="row">
        <div class="col-4">
            <div class="form-group">
                <input type="file" @ref="inputReference" @onchange="async () => await OpenFileAsync()" />
                <u1>
                </u1>
            </div>
            <button class="btn btn-block btn-success" @onclick="async () => await UploadFileAsync()">Upload profile image</button>
            @if (!string.IsNullOrWhiteSpace(message))
            {
                <div class="alert alert-success">
                    Image has been uploaded
                </div>
            }
        </div>
        <div class="rounded-circle">
            @if (imagePath != null)
            {
                <img style="width:150px" src="@imagePath" class=" align-content-lg-center" />
            }
        </div>
    </div>

    <body>
        <h3 class="mb-0">My account</h3>
        <div class="card-body">
            <h6 class="heading-small text-muted mb-4">User information</h6>
            <div class="pl-lg-4">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group focused">
                            <label class="form-control-label" for="userid">User ID</label>
                            <input type="text" id="userid" class="form-control form-control-alternative" value="@_user.Id" readonly>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <EditForm Model="@_user" OnValidSubmit="@HandleSubmit">
                                <label class="form-control-label" for="email">Email address</label>
                                <input type="email" id="email" @bind-value="@_user.Gmail" class="form-control form-control-alternative">
                            </EditForm>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <EditForm Model="@_user" OnValidSubmit="@HandleSubmit">
                                <label class="form-control-label" for="fname">Full name</label>
                                <input type="text" id="fname" @bind-value="@_user.FullName" class="form-control form-control-alternative">
                            </EditForm>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group focused">
                            <label class="form-control-label" for="card">Card balance</label>
                            <input type="text" id="card" class="form-control form-control-alternative" value="@_user.Card" readonly>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group focused">
                            <label class="form-control-label" for="cash">Cash balance</label>
                            <input type="text" id="cash" class="form-control form-control-alternative" value="@_user.Cash" readonly>
                        </div>
                    </div>
                </div>
            </div>
            <hr class="my-4">
        </div>
        <footer class="footer">
            <div class="row align-items-center justify-content-xl-between">
            </div>
        </footer>
    </body>
}

@code
{
    ElementReference inputReference;
    string message = string.Empty;
    static string imagePath = null;
    private User _user;
    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;
    Stream fileStream = null;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _user = await Http.GetFromJsonAsync<User>($"{Configuration["requestUri"]}/users");
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    protected async Task HandleSubmit()
    {
        try
        {
            await Http.PutAsJsonAsync($"{Configuration["requestUri"]}/users", _user);
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    async Task OpenFileAsync()
    {
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
            return;

        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        size = $"{fileInfo.Size}b";
        type = fileInfo.Type;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(ms.ToArray());
        }

    }

    async Task UploadFileAsync()
    {
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileName);
        string url = "https://localhost:44301";
        var response = await Http.PostAsync($"{url}/api/images", content);


        if (response.IsSuccessStatusCode)
        {
            var uploadedFileName = await response.Content.ReadAsStringAsync();
            imagePath = $"{url}/{uploadedFileName}";
            message = "Uploaded successfully";
        }
    }

}