@page "/savings"
@page "/savings/{sortingColumn}/{isAscending:bool}"

@using SmartSaver.Presentation.Models
@using SmartSaver.Presentation.Shared.Sorting
@using SmartSaver.Presentation.Shared.LoadingSpinner
@using SmartSaver.Presentation.Constants
@using SmartSaver.Presentation.Helpers
@using SmartSaver.Presentation.Shared.Breadcrumbs

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject IBreadcrumbService BreadcrumbService


<div class="topnav">
    <a class="active" href="savings">Goals</a>
    <a href="savings/goalcreation">Create a new Goal</a>
    <a href="savings/goaledit">Add funds to your goal</a>
</div>

@if (SavingGoalsHelper._savingGoals == null)
{
    <LoadingSpinner />
}
else
{
    <h1>Saving Goals</h1>
    <table class="table">
        <thead>
            <tr>
                <th @onclick="@(async () => { SetSortingModelValues(SavingGoalsSortingEnum.GoalName, !_sortingModel.IsAscending); await GetSortedSavingGoals();})">
                    <div class="d-inline-flex">
                        <div class="align-self-center">
                            <div class="p-2">
                                Goal Name
                            </div>
                        </div>
                        <div>
                            <SortingButtons IsSorting="@(_sortingModel.SortingColumn == SavingGoalsSortingEnum.GoalName)" IsAscending="@_sortingModel.IsAscending" />
                        </div>
                    </div>
                </th>
                <th @onclick="@(async () => { SetSortingModelValues(SavingGoalsSortingEnum.Description, !_sortingModel.IsAscending); await GetSortedSavingGoals();})">
                    <div class="d-inline-flex">
                        <div class="align-self-center">
                            <div class="p-2">
                                Description
                            </div>
                        </div>
                        <div>
                            <SortingButtons IsSorting="@(_sortingModel.SortingColumn == SavingGoalsSortingEnum.Description)" IsAscending="@_sortingModel.IsAscending" />
                        </div>
                    </div>
                </th>
                <th @onclick="@(async () => { SetSortingModelValues(SavingGoalsSortingEnum.GoalAmount, !_sortingModel.IsAscending); await GetSortedSavingGoals();})">
                    <div class="d-inline-flex">
                        <div class="align-self-center">
                            <div class="p-2">
                                Goal Amount
                            </div>
                        </div>
                        <div>
                            <SortingButtons IsSorting="@(_sortingModel.SortingColumn == SavingGoalsSortingEnum.GoalAmount)" IsAscending="@_sortingModel.IsAscending" />
                        </div>
                    </div>
                </th>
                <th @onclick="@(async () => { SetSortingModelValues(SavingGoalsSortingEnum.StartDate, !_sortingModel.IsAscending); await GetSortedSavingGoals();})">
                    <div class="d-inline-flex">
                        <div class="align-self-center">
                            <div class="p-2">
                                Start Date
                            </div>
                        </div>
                        <div>
                            <SortingButtons IsSorting="@(_sortingModel.SortingColumn == SavingGoalsSortingEnum.StartDate)" IsAscending="@_sortingModel.IsAscending" />
                        </div>
                    </div>
                </th>
                <th @onclick="@(async () => { SetSortingModelValues(SavingGoalsSortingEnum.FinishDate, !_sortingModel.IsAscending); await GetSortedSavingGoals();})">
                    <div class="d-inline-flex">
                        <div class="align-self-center">
                            <div class="p-2">
                                Finish Date
                            </div>
                        </div>
                        <div>
                            <SortingButtons IsSorting="@(_sortingModel.SortingColumn == SavingGoalsSortingEnum.FinishDate)" IsAscending="@_sortingModel.IsAscending" />
                        </div>
                    </div>
                </th>
                <th @onclick="@(async () => { SetSortingModelValues(SavingGoalsSortingEnum.Progress, !_sortingModel.IsAscending); await GetSortedSavingGoals();})">
                    <div class="d-inline-flex">
                        <div class="align-self-center">
                            <div class="p-2">
                                Progress
                            </div>
                        </div>
                        <div>
                            <SortingButtons IsSorting="@(_sortingModel.SortingColumn == SavingGoalsSortingEnum.Progress)" IsAscending="@_sortingModel.IsAscending" />
                        </div>
                    </div>
                </th>
                <th @onclick="@(async () => { SetSortingModelValues(SavingGoalsSortingEnum.Progress, !_sortingModel.IsAscending); await GetSortedSavingGoals();})">
                    <div class="d-inline-flex">
                        <div class="align-self-center">
                            <div class="p-2">
                                Progress %
                            </div>
                        </div>
                        <div>
                            <SortingButtons IsSorting="@(_sortingModel.SortingColumn == SavingGoalsSortingEnum.Progress)" IsAscending="@_sortingModel.IsAscending" />
                        </div>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var goal in SavingGoalsHelper._savingGoals)
            {
                <tr>
                    <td>@goal.GoalName</td>
                    <td>@goal.Description</td>
                    <td>@goal.GoalAmount $</td>
                    <td>@goal.StartDate.ToString("MM/dd/yyyy")</td>
                    <td>@goal.FinishDate.ToString("MM/dd/yyyy")</td>
                    <td>@goal.Progress $</td>
                    <td>@goal.ProgressPercentageValue.ToString("0.00") %</td>
                </tr>
            }
        </tbody>
    </table>
}





@code {

    //private SavingGoal[] _savingGoals;
    private readonly SavingGoalsSortingModel _sortingModel = new SavingGoalsSortingModel();

    [Parameter]
    public string SortingColumn { get; set; }
    [Parameter]
    public bool IsAscending { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!SavingGoalsHelper.isAlreadyInit)
        {
            ParseUrlParameters();
            await GetSortedSavingGoals();
        }
        else
        {
            return;
        }
    }

    private async Task GetSortedSavingGoals()
    {
        var requestUri = $"https://localhost:44301/savings/{Constants.TestUserId}/sorting?sortingColumn={_sortingModel.SortingColumn}&isAscending={_sortingModel.IsAscending}";
        SavingGoalsHelper._savingGoals = await Http.GetFromJsonAsync<SavingGoal[]>(requestUri);
        NavigationManager.NavigateTo($"savings/{_sortingModel.SortingColumn}/{_sortingModel.IsAscending}");
    }

    private void ParseUrlParameters()
    {
        if (!string.IsNullOrEmpty(SortingColumn))
        {
            SetSortingModelValues((SavingGoalsSortingEnum)Enum.Parse(typeof(SavingGoalsSortingEnum), SortingColumn), IsAscending);
        }
    }

    private void SetSortingModelValues(SavingGoalsSortingEnum column, bool isAscending)
    {
        _sortingModel.SortingColumn = column;
        _sortingModel.IsAscending = isAscending;
    }
}